# .github/workflows/ci-cd-pipeline.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Stage 1: Code Validation
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  # Stage 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm run vitest:test

  # Stage 3: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sportbuzz:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/sportbuzz:latest
          docker run -d --name sportbuzz -p 80:80 ${{ secrets.DOCKER_USERNAME }}/sportbuzz:latest

  # Stage 4: Deploy and Run Docker Container
  # deploy:
  #   name: Deploy Application
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up SSH
  #       uses: webfactory/ssh-agent@v0.10.1
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #     - name: Deploy to Server
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} << EOF
  #           docker pull ${{ secrets.DOCKER_USERNAME }}/sportbuzz:latest
  #           docker stop sportbuzz || true
  #           docker rm sportbuzz || true
  #           docker run -d --name sportbuzz -p 80:80 ${{ secrets.DOCKER_USERNAME }}/sportbuzz:latest
  #         EOF
